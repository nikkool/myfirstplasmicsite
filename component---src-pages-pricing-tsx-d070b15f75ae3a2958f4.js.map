{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/icons/PlasmicIcon__Done24Pxsvg2.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicBullet.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicBullet.module.css","webpack://gatsby-starter-default/./src/components/Bullet.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicBaseCard.module.css","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicBaseCard.tsx","webpack://gatsby-starter-default/./src/components/BaseCard.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicPlan.module.css","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicPlan.tsx","webpack://gatsby-starter-default/./src/components/Plan.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicFaq.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicFaq.module.css","webpack://gatsby-starter-default/./src/components/Faq.tsx","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicPricing.module.css","webpack://gatsby-starter-default/./src/components/plasmic/simple_light_landing_page/PlasmicPricing.tsx","webpack://gatsby-starter-default/./src/pages/pricing.tsx"],"names":["props","className","style","title","restProps","xmlns","viewBox","height","width","fill","classNames","d","PlasmicBullet__VariantProps","Array","PlasmicBullet__ArgProps","PlasmicDescendants","root","svg","makeNodeComponent","nodeName","func","deriveRenderOpts","name","descendantNames","internalArgPropNames","internalVariantPropNames","variants","args","overrides","forNode","as","data-plasmic-name","data-plasmic-override","data-plasmic-root","data-plasmic-for-node","hasGap","defaultcss","projectcss","role","defaultContents","value","children","PlasmicBullet__RenderFunc","displayName","PlasmicBullet","Object","assign","internalVariantProps","internalArgProps","root__long","box__n1Zs6","box__long__n1Zs6UsNhq","slotChildren","slotChildren__long","box__mUNgN","box__long__mUNgNUsNhq","PlasmicBaseCard__VariantProps","PlasmicBaseCard__ArgProps","PlasmicBaseCard","sty","hasVariant","iconBack","PlasmicBaseCard__RenderFunc","box__eL8Yu","box___6Py1F","slotName","box__o6GgJ","PlasmicPlan__VariantProps","PlasmicPlan__ArgProps","PlasmicPlan","price","Bullet","description","LinkButton","text","type","PlasmicPlan__RenderFunc","PlasmicFaq__VariantProps","PlasmicFaq__ArgProps","PlasmicFaq","slot","PlasmicFaq__RenderFunc","box__oXv6G","header","section___3EkHb","box__rRFsw","plan__zwEw1","box__gupEv","plan__s0PBk","box___9BpXa","box__mHxJm","bullet__pG00C","bullet__deNqC","bullet__rupVf","bullet__kwgyS","plan__bZpZv","box__y5YHx","section__xMy3T","faq__n5VN5","faq__za2CH","faq__ifBhf","footer","PlasmicPricing__VariantProps","PlasmicPricing__ArgProps","ensureGlobalVariants","screen","useScreenVariants","Header","Section","subtitle","Footer","PlasmicPricing__RenderFunc","PlasmicPricing"],"mappings":"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","file":"component---src-pages-pricing-tsx-d070b15f75ae3a2958f4.js","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\nimport React from \"react\"\nimport { classNames } from \"@plasmicapp/react-web\"\n\nexport type Done24Pxsvg2IconProps = React.ComponentProps<\"svg\"> & {\n  title?: string\n}\n\nexport function Done24Pxsvg2Icon(props: Done24Pxsvg2IconProps) {\n  const { className, style, title, ...restProps } = props\n  return (\n    <svg\n      xmlns={\"http://www.w3.org/2000/svg\"}\n      viewBox={\"0 0 24 24\"}\n      height={\"1em\"}\n      width={\"1em\"}\n      style={{\n        fill: \"currentcolor\",\n\n        ...(style || {}),\n      }}\n      className={classNames(\"plasmic-default__svg\", className)}\n      {...restProps}\n    >\n      {title && <title>{title}</title>}\n\n      <path d={\"M0 0h24v24H0z\"} fill={\"none\"}></path>\n\n      <path d={\"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\"}></path>\n    </svg>\n  )\n}\n\nexport default Done24Pxsvg2Icon\n/* prettier-ignore-end */\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: dd53smoB9V3esAu5mdCJqk\n// Component: rAQW-xj1ccUHnm\nimport * as React from \"react\"\n\nimport { Link, GatsbyLinkProps as LinkProps } from \"gatsby\"\n\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  wrapWithClassName,\n  createPlasmicElementProxy,\n  makeFragment,\n  MultiChoiceArg,\n  SingleBooleanChoiceArg,\n  SingleChoiceArg,\n  pick,\n  omit,\n  useTrigger,\n  StrictProps,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\n\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as defaultcss from \"../plasmic__default_style.module.css\" // plasmic-import: global/defaultcss\nimport * as projectcss from \"./plasmic_simple_light_landing_page.module.css\" // plasmic-import: dd53smoB9V3esAu5mdCJqk/projectcss\nimport * as sty from \"./PlasmicBullet.module.css\" // plasmic-import: rAQW-xj1ccUHnm/css\n\nimport Done24Pxsvg2Icon from \"./icons/PlasmicIcon__Done24Pxsvg2\" // plasmic-import: H38tBp7PsMbxPW/icon\n\nexport type PlasmicBullet__VariantMembers = {}\n\nexport type PlasmicBullet__VariantsArgs = {}\ntype VariantPropType = keyof PlasmicBullet__VariantsArgs\nexport const PlasmicBullet__VariantProps = new Array<VariantPropType>()\n\nexport type PlasmicBullet__ArgsType = {\n  children?: React.ReactNode\n}\n\ntype ArgPropType = keyof PlasmicBullet__ArgsType\nexport const PlasmicBullet__ArgProps = new Array<ArgPropType>(\"children\")\n\nexport type PlasmicBullet__OverridesType = {\n  root?: p.Flex<\"div\">\n  svg?: p.Flex<\"svg\">\n}\n\nexport interface DefaultBulletProps {\n  children?: React.ReactNode\n  className?: string\n}\n\nfunction PlasmicBullet__RenderFunc(props: {\n  variants: PlasmicBullet__VariantsArgs\n  args: PlasmicBullet__ArgsType\n  overrides: PlasmicBullet__OverridesType\n  forNode?: string\n}) {\n  const { variants, args, overrides, forNode } = props\n\n  return (\n    <p.Stack\n      as={\"div\"}\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      hasGap={true}\n      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}\n    >\n      <Done24Pxsvg2Icon\n        data-plasmic-name={\"svg\"}\n        data-plasmic-override={overrides.svg}\n        className={classNames(defaultcss.all, sty.svg)}\n        role={\"img\"}\n      />\n\n      <p.PlasmicSlot\n        defaultContents={\"Lorem ipsum dolor velit\"}\n        value={args.children}\n      />\n    </p.Stack>\n  ) as React.ReactElement | null\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"svg\"],\n  svg: [\"svg\"],\n} as const\ntype NodeNameType = keyof typeof PlasmicDescendants\ntype DescendantsType<\n  T extends NodeNameType\n> = typeof PlasmicDescendants[T][number]\ntype NodeDefaultElementType = {\n  root: \"div\"\n  svg: \"svg\"\n}\n\ntype ReservedPropsType = \"variants\" | \"args\" | \"overrides\"\ntype NodeOverridesType<T extends NodeNameType> = Pick<\n  PlasmicBullet__OverridesType,\n  DescendantsType<T>\n>\ntype NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects\n  variants?: PlasmicBullet__VariantsArgs\n  args?: PlasmicBullet__ArgsType\n  overrides?: NodeOverridesType<T>\n} & Omit<PlasmicBullet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props\n  // Specify args directly as props\n  Omit<PlasmicBullet__ArgsType, ReservedPropsType> &\n  // Specify overrides for each element directly as props\n  Omit<\n    NodeOverridesType<T>,\n    ReservedPropsType | VariantPropType | ArgPropType\n  > &\n  // Specify props for the root element\n  Omit<\n    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,\n    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>\n  >\n\nfunction makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {\n  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }\n  const func = function <T extends PropsType>(\n    props: T & StrictProps<T, PropsType>\n  ) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicBullet__ArgProps,\n      internalVariantPropNames: PlasmicBullet__VariantProps,\n    })\n\n    return PlasmicBullet__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicBullet\"\n  } else {\n    func.displayName = `PlasmicBullet.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicBullet = Object.assign(\n  // Top-level PlasmicBullet renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    svg: makeNodeComponent(\"svg\"),\n\n    // Metadata about props expected for PlasmicBullet\n    internalVariantProps: PlasmicBullet__VariantProps,\n    internalArgProps: PlasmicBullet__ArgProps,\n  }\n)\n\nexport default PlasmicBullet\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport const root = \"PlasmicBullet-module--root--2m8c8\";\nexport const svg = \"PlasmicBullet-module--svg--1ZvCg\";","// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport {\n  PlasmicBullet,\n  DefaultBulletProps,\n} from \"./plasmic/simple_light_landing_page/PlasmicBullet\"\n\n// Your component props start with props for variants and slots you defined\n// in Plasmic, but you can add more here, like event handlers that you can\n// attach to named nodes in your component.\n//\n// If you don't want to expose certain variants or slots as a prop, you can use\n// Omit to hide them:\n//\n// interface BulletProps extends Omit<DefaultBulletProps, \"hideProps1\"|\"hideProp2\"> {\n//   // etc.\n// }\n//\n// You can also stop extending from DefaultBulletProps altogether and have\n// total control over the props for your component.\ninterface BulletProps extends DefaultBulletProps {}\n\nfunction Bullet(props: BulletProps) {\n  // Use PlasmicBullet to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicBullet are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, we are just piping all BulletProps here, but feel free\n  // to do whatever works for you.\n  return <PlasmicBullet {...props} />\n}\n\nexport default Bullet\n","// extracted by mini-css-extract-plugin\nexport const root = \"PlasmicBaseCard-module--root--1zPAV\";\nexport const root__long = \"PlasmicBaseCard-module--root__long--2kAzV\";\nexport const box__n1Zs6 = \"PlasmicBaseCard-module--box__n1Zs6--3lkft\";\nexport const box__long__n1Zs6UsNhq = \"PlasmicBaseCard-module--box__long__n1Zs6UsNhq--3-07i\";\nexport const slotChildren = \"PlasmicBaseCard-module--slotChildren--1N2CK\";\nexport const slotChildren__long = \"PlasmicBaseCard-module--slotChildren__long--3afQk\";\nexport const box__mUNgN = \"PlasmicBaseCard-module--box__mUNgN--3vSb_\";\nexport const box__long__mUNgNUsNhq = \"PlasmicBaseCard-module--box__long__mUNgNUsNhq--2JHM4\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: dd53smoB9V3esAu5mdCJqk\n// Component: 3e3MKolv6lrxUO\nimport * as React from \"react\"\n\nimport { Link, GatsbyLinkProps as LinkProps } from \"gatsby\"\n\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  wrapWithClassName,\n  createPlasmicElementProxy,\n  makeFragment,\n  MultiChoiceArg,\n  SingleBooleanChoiceArg,\n  SingleChoiceArg,\n  pick,\n  omit,\n  useTrigger,\n  StrictProps,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\n\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as defaultcss from \"../plasmic__default_style.module.css\" // plasmic-import: global/defaultcss\nimport * as projectcss from \"./plasmic_simple_light_landing_page.module.css\" // plasmic-import: dd53smoB9V3esAu5mdCJqk/projectcss\nimport * as sty from \"./PlasmicBaseCard.module.css\" // plasmic-import: 3e3MKolv6lrxUO/css\n\nexport type PlasmicBaseCard__VariantMembers = {\n  long: \"long\"\n}\n\nexport type PlasmicBaseCard__VariantsArgs = {\n  long?: SingleBooleanChoiceArg<\"long\">\n}\n\ntype VariantPropType = keyof PlasmicBaseCard__VariantsArgs\nexport const PlasmicBaseCard__VariantProps = new Array<VariantPropType>(\"long\")\n\nexport type PlasmicBaseCard__ArgsType = {\n  children?: React.ReactNode\n  iconBack?: React.ReactNode\n}\n\ntype ArgPropType = keyof PlasmicBaseCard__ArgsType\nexport const PlasmicBaseCard__ArgProps = new Array<ArgPropType>(\n  \"children\",\n  \"iconBack\"\n)\n\nexport type PlasmicBaseCard__OverridesType = {\n  root?: p.Flex<\"div\">\n}\n\nexport interface DefaultBaseCardProps {\n  children?: React.ReactNode\n  iconBack?: React.ReactNode\n  long?: SingleBooleanChoiceArg<\"long\">\n  className?: string\n}\n\nfunction PlasmicBaseCard__RenderFunc(props: {\n  variants: PlasmicBaseCard__VariantsArgs\n  args: PlasmicBaseCard__ArgsType\n  overrides: PlasmicBaseCard__OverridesType\n  forNode?: string\n}) {\n  const { variants, args, overrides, forNode } = props\n\n  return (\n    <p.Stack\n      as={\"div\"}\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      hasGap={true}\n      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {\n        [sty.root__long]: hasVariant(variants, \"long\", \"long\"),\n      })}\n    >\n      <div\n        className={classNames(defaultcss.all, sty.box__n1Zs6, {\n          [sty.box__long__n1Zs6UsNhq]: hasVariant(variants, \"long\", \"long\"),\n        })}\n      >\n        <p.PlasmicSlot\n          defaultContents={\n            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n          }\n          value={args.children}\n          className={classNames(sty.slotChildren, {\n            [sty.slotChildren__long]: hasVariant(variants, \"long\", \"long\"),\n          })}\n        />\n      </div>\n\n      {(hasVariant(variants, \"long\", \"long\") ? true : false) ? (\n        <div\n          className={classNames(defaultcss.all, sty.box__mUNgN, {\n            [sty.box__long__mUNgNUsNhq]: hasVariant(variants, \"long\", \"long\"),\n          })}\n        >\n          <p.PlasmicSlot\n            defaultContents={\n              <svg\n                className={classNames(defaultcss.all, sty.svg__hwJb5)}\n                role={\"img\"}\n              />\n            }\n            value={args.iconBack}\n          />\n        </div>\n      ) : null}\n    </p.Stack>\n  ) as React.ReactElement | null\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\"],\n} as const\ntype NodeNameType = keyof typeof PlasmicDescendants\ntype DescendantsType<\n  T extends NodeNameType\n> = typeof PlasmicDescendants[T][number]\ntype NodeDefaultElementType = {\n  root: \"div\"\n}\n\ntype ReservedPropsType = \"variants\" | \"args\" | \"overrides\"\ntype NodeOverridesType<T extends NodeNameType> = Pick<\n  PlasmicBaseCard__OverridesType,\n  DescendantsType<T>\n>\ntype NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects\n  variants?: PlasmicBaseCard__VariantsArgs\n  args?: PlasmicBaseCard__ArgsType\n  overrides?: NodeOverridesType<T>\n} & Omit<PlasmicBaseCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props\n  // Specify args directly as props\n  Omit<PlasmicBaseCard__ArgsType, ReservedPropsType> &\n  // Specify overrides for each element directly as props\n  Omit<\n    NodeOverridesType<T>,\n    ReservedPropsType | VariantPropType | ArgPropType\n  > &\n  // Specify props for the root element\n  Omit<\n    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,\n    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>\n  >\n\nfunction makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {\n  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }\n  const func = function <T extends PropsType>(\n    props: T & StrictProps<T, PropsType>\n  ) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicBaseCard__ArgProps,\n      internalVariantPropNames: PlasmicBaseCard__VariantProps,\n    })\n\n    return PlasmicBaseCard__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicBaseCard\"\n  } else {\n    func.displayName = `PlasmicBaseCard.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicBaseCard = Object.assign(\n  // Top-level PlasmicBaseCard renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n\n    // Metadata about props expected for PlasmicBaseCard\n    internalVariantProps: PlasmicBaseCard__VariantProps,\n    internalArgProps: PlasmicBaseCard__ArgProps,\n  }\n)\n\nexport default PlasmicBaseCard\n/* prettier-ignore-end */\n","// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport {\n  PlasmicBaseCard,\n  DefaultBaseCardProps,\n} from \"./plasmic/simple_light_landing_page/PlasmicBaseCard\"\n\n// Your component props start with props for variants and slots you defined\n// in Plasmic, but you can add more here, like event handlers that you can\n// attach to named nodes in your component.\n//\n// If you don't want to expose certain variants or slots as a prop, you can use\n// Omit to hide them:\n//\n// interface BaseCardProps extends Omit<DefaultBaseCardProps, \"hideProps1\"|\"hideProp2\"> {\n//   // etc.\n// }\n//\n// You can also stop extending from DefaultBaseCardProps altogether and have\n// total control over the props for your component.\ninterface BaseCardProps extends DefaultBaseCardProps {}\n\nfunction BaseCard(props: BaseCardProps) {\n  // Use PlasmicBaseCard to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicBaseCard are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, we are just piping all BaseCardProps here, but feel free\n  // to do whatever works for you.\n  return <PlasmicBaseCard {...props} />\n}\n\nexport default BaseCard\n","// extracted by mini-css-extract-plugin\nexport const root = \"PlasmicPlan-module--root--27EcQ\";\nexport const box__eL8Yu = \"PlasmicPlan-module--box__eL8Yu--3fAyD\";\nexport const box___6Py1F = \"PlasmicPlan-module--box___6Py1F--1uMgu\";\nexport const slotName = \"PlasmicPlan-module--slotName--1clZ5\";\nexport const box__o6GgJ = \"PlasmicPlan-module--box__o6GgJ--Cy_0Q\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: dd53smoB9V3esAu5mdCJqk\n// Component: fkmxQq5EWmYolD\nimport * as React from \"react\"\n\nimport { Link, GatsbyLinkProps as LinkProps } from \"gatsby\"\n\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  wrapWithClassName,\n  createPlasmicElementProxy,\n  makeFragment,\n  MultiChoiceArg,\n  SingleBooleanChoiceArg,\n  SingleChoiceArg,\n  pick,\n  omit,\n  useTrigger,\n  StrictProps,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport BaseCard from \"../../BaseCard\" // plasmic-import: 3e3MKolv6lrxUO/component\nimport Bullet from \"../../Bullet\" // plasmic-import: rAQW-xj1ccUHnm/component\nimport LinkButton from \"../../LinkButton\" // plasmic-import: 1hrh0iVzho4Vh/component\n\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as defaultcss from \"../plasmic__default_style.module.css\" // plasmic-import: global/defaultcss\nimport * as projectcss from \"./plasmic_simple_light_landing_page.module.css\" // plasmic-import: dd53smoB9V3esAu5mdCJqk/projectcss\nimport * as sty from \"./PlasmicPlan.module.css\" // plasmic-import: fkmxQq5EWmYolD/css\n\nexport type PlasmicPlan__VariantMembers = {}\n\nexport type PlasmicPlan__VariantsArgs = {}\ntype VariantPropType = keyof PlasmicPlan__VariantsArgs\nexport const PlasmicPlan__VariantProps = new Array<VariantPropType>()\n\nexport type PlasmicPlan__ArgsType = {\n  price?: React.ReactNode\n  name?: React.ReactNode\n  description?: React.ReactNode\n  children?: React.ReactNode\n}\n\ntype ArgPropType = keyof PlasmicPlan__ArgsType\nexport const PlasmicPlan__ArgProps = new Array<ArgPropType>(\n  \"price\",\n  \"name\",\n  \"description\",\n  \"children\"\n)\n\nexport type PlasmicPlan__OverridesType = {\n  root?: p.Flex<typeof BaseCard>\n}\n\nexport interface DefaultPlanProps {\n  price?: React.ReactNode\n  name?: React.ReactNode\n  description?: React.ReactNode\n  children?: React.ReactNode\n  className?: string\n}\n\nfunction PlasmicPlan__RenderFunc(props: {\n  variants: PlasmicPlan__VariantsArgs\n  args: PlasmicPlan__ArgsType\n  overrides: PlasmicPlan__OverridesType\n  forNode?: string\n}) {\n  const { variants, args, overrides, forNode } = props\n\n  return (\n    <BaseCard\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\"__wab_instance\", sty.root)}\n    >\n      <div className={classNames(defaultcss.all, sty.box__eL8Yu)}>\n        <p.Stack\n          as={\"div\"}\n          hasGap={true}\n          className={classNames(defaultcss.all, sty.box___6Py1F)}\n        >\n          <p.PlasmicSlot\n            defaultContents={\"Basic\"}\n            value={args.name}\n            className={classNames(sty.slotName)}\n          />\n          <p.PlasmicSlot\n            defaultContents={\n              <div\n                className={classNames(\n                  defaultcss.all,\n                  defaultcss.__wab_text,\n                  sty.box___6SWw\n                )}\n              >\n                {\"$10\"}\n              </div>\n            }\n            value={args.price}\n          />\n\n          <p.PlasmicSlot\n            defaultContents={\n              <p.Stack\n                as={\"div\"}\n                hasGap={true}\n                className={classNames(defaultcss.all, sty.box__kJ3Ub)}\n              >\n                <Bullet\n                  className={classNames(\"__wab_instance\", sty.bullet__nsOpk)}\n                />\n\n                <Bullet\n                  className={classNames(\"__wab_instance\", sty.bullet__y4X)}\n                />\n\n                <Bullet\n                  className={classNames(\"__wab_instance\", sty.bullet__cAsrk)}\n                />\n              </p.Stack>\n            }\n            value={args.description}\n          />\n\n          <div className={classNames(defaultcss.all, sty.box__o6GgJ)}>\n            <p.PlasmicSlot\n              defaultContents={\n                <LinkButton\n                  text={\"Get started\"}\n                  type={\"outlineBlue\" as const}\n                />\n              }\n              value={args.children}\n            />\n          </div>\n        </p.Stack>\n      </div>\n    </BaseCard>\n  ) as React.ReactElement | null\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\"],\n} as const\ntype NodeNameType = keyof typeof PlasmicDescendants\ntype DescendantsType<\n  T extends NodeNameType\n> = typeof PlasmicDescendants[T][number]\ntype NodeDefaultElementType = {\n  root: typeof BaseCard\n}\n\ntype ReservedPropsType = \"variants\" | \"args\" | \"overrides\"\ntype NodeOverridesType<T extends NodeNameType> = Pick<\n  PlasmicPlan__OverridesType,\n  DescendantsType<T>\n>\ntype NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects\n  variants?: PlasmicPlan__VariantsArgs\n  args?: PlasmicPlan__ArgsType\n  overrides?: NodeOverridesType<T>\n} & Omit<PlasmicPlan__VariantsArgs, ReservedPropsType> & // Specify variants directly as props\n  // Specify args directly as props\n  Omit<PlasmicPlan__ArgsType, ReservedPropsType> &\n  // Specify overrides for each element directly as props\n  Omit<\n    NodeOverridesType<T>,\n    ReservedPropsType | VariantPropType | ArgPropType\n  > &\n  // Specify props for the root element\n  Omit<\n    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,\n    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>\n  >\n\nfunction makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {\n  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }\n  const func = function <T extends PropsType>(\n    props: T & StrictProps<T, PropsType>\n  ) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicPlan__ArgProps,\n      internalVariantPropNames: PlasmicPlan__VariantProps,\n    })\n\n    return PlasmicPlan__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicPlan\"\n  } else {\n    func.displayName = `PlasmicPlan.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicPlan = Object.assign(\n  // Top-level PlasmicPlan renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n\n    // Metadata about props expected for PlasmicPlan\n    internalVariantProps: PlasmicPlan__VariantProps,\n    internalArgProps: PlasmicPlan__ArgProps,\n  }\n)\n\nexport default PlasmicPlan\n/* prettier-ignore-end */\n","// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport {\n  PlasmicPlan,\n  DefaultPlanProps,\n} from \"./plasmic/simple_light_landing_page/PlasmicPlan\"\n\n// Your component props start with props for variants and slots you defined\n// in Plasmic, but you can add more here, like event handlers that you can\n// attach to named nodes in your component.\n//\n// If you don't want to expose certain variants or slots as a prop, you can use\n// Omit to hide them:\n//\n// interface PlanProps extends Omit<DefaultPlanProps, \"hideProps1\"|\"hideProp2\"> {\n//   // etc.\n// }\n//\n// You can also stop extending from DefaultPlanProps altogether and have\n// total control over the props for your component.\ninterface PlanProps extends DefaultPlanProps {}\n\nfunction Plan(props: PlanProps) {\n  // Use PlasmicPlan to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicPlan are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, we are just piping all PlanProps here, but feel free\n  // to do whatever works for you.\n  return <PlasmicPlan {...props} />\n}\n\nexport default Plan\n","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: dd53smoB9V3esAu5mdCJqk\n// Component: 5eobQk2NlPo3sb\nimport * as React from \"react\"\n\nimport { Link, GatsbyLinkProps as LinkProps } from \"gatsby\"\n\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  wrapWithClassName,\n  createPlasmicElementProxy,\n  makeFragment,\n  MultiChoiceArg,\n  SingleBooleanChoiceArg,\n  SingleChoiceArg,\n  pick,\n  omit,\n  useTrigger,\n  StrictProps,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport BaseCard from \"../../BaseCard\" // plasmic-import: 3e3MKolv6lrxUO/component\n\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as defaultcss from \"../plasmic__default_style.module.css\" // plasmic-import: global/defaultcss\nimport * as projectcss from \"./plasmic_simple_light_landing_page.module.css\" // plasmic-import: dd53smoB9V3esAu5mdCJqk/projectcss\nimport * as sty from \"./PlasmicFaq.module.css\" // plasmic-import: 5eobQk2NlPo3sb/css\n\nexport type PlasmicFaq__VariantMembers = {}\n\nexport type PlasmicFaq__VariantsArgs = {}\ntype VariantPropType = keyof PlasmicFaq__VariantsArgs\nexport const PlasmicFaq__VariantProps = new Array<VariantPropType>()\n\nexport type PlasmicFaq__ArgsType = {\n  children?: React.ReactNode\n  slot?: React.ReactNode\n}\n\ntype ArgPropType = keyof PlasmicFaq__ArgsType\nexport const PlasmicFaq__ArgProps = new Array<ArgPropType>(\"children\", \"slot\")\n\nexport type PlasmicFaq__OverridesType = {\n  root?: p.Flex<typeof BaseCard>\n}\n\nexport interface DefaultFaqProps {\n  children?: React.ReactNode\n  slot?: React.ReactNode\n  className?: string\n}\n\nfunction PlasmicFaq__RenderFunc(props: {\n  variants: PlasmicFaq__VariantsArgs\n  args: PlasmicFaq__ArgsType\n  overrides: PlasmicFaq__OverridesType\n  forNode?: string\n}) {\n  const { variants, args, overrides, forNode } = props\n\n  return (\n    <BaseCard\n      data-plasmic-name={\"root\"}\n      data-plasmic-override={overrides.root}\n      data-plasmic-root={true}\n      data-plasmic-for-node={forNode}\n      className={classNames(\"__wab_instance\", sty.root)}\n    >\n      <p.Stack\n        as={\"div\"}\n        hasGap={true}\n        className={classNames(defaultcss.all, sty.box__mxAp7)}\n      >\n        <div className={classNames(defaultcss.all, sty.box___6Kkm5)}>\n          <div className={classNames(defaultcss.all, sty.box__fdElp)}>\n            <p.PlasmicSlot\n              defaultContents={\"Are there long-term contracts?\"}\n              value={args.children}\n              className={classNames(sty.slotChildren)}\n            />\n          </div>\n        </div>\n\n        <p.PlasmicSlot\n          defaultContents={\n            \"Yes! You can. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat.\"\n          }\n          value={args.slot}\n          className={classNames(sty.slotSlot)}\n        />\n      </p.Stack>\n    </BaseCard>\n  ) as React.ReactElement | null\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\"],\n} as const\ntype NodeNameType = keyof typeof PlasmicDescendants\ntype DescendantsType<\n  T extends NodeNameType\n> = typeof PlasmicDescendants[T][number]\ntype NodeDefaultElementType = {\n  root: typeof BaseCard\n}\n\ntype ReservedPropsType = \"variants\" | \"args\" | \"overrides\"\ntype NodeOverridesType<T extends NodeNameType> = Pick<\n  PlasmicFaq__OverridesType,\n  DescendantsType<T>\n>\ntype NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects\n  variants?: PlasmicFaq__VariantsArgs\n  args?: PlasmicFaq__ArgsType\n  overrides?: NodeOverridesType<T>\n} & Omit<PlasmicFaq__VariantsArgs, ReservedPropsType> & // Specify variants directly as props\n  // Specify args directly as props\n  Omit<PlasmicFaq__ArgsType, ReservedPropsType> &\n  // Specify overrides for each element directly as props\n  Omit<\n    NodeOverridesType<T>,\n    ReservedPropsType | VariantPropType | ArgPropType\n  > &\n  // Specify props for the root element\n  Omit<\n    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,\n    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>\n  >\n\nfunction makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {\n  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }\n  const func = function <T extends PropsType>(\n    props: T & StrictProps<T, PropsType>\n  ) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicFaq__ArgProps,\n      internalVariantPropNames: PlasmicFaq__VariantProps,\n    })\n\n    return PlasmicFaq__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicFaq\"\n  } else {\n    func.displayName = `PlasmicFaq.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicFaq = Object.assign(\n  // Top-level PlasmicFaq renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n\n    // Metadata about props expected for PlasmicFaq\n    internalVariantProps: PlasmicFaq__VariantProps,\n    internalArgProps: PlasmicFaq__ArgProps,\n  }\n)\n\nexport default PlasmicFaq\n/* prettier-ignore-end */\n","// extracted by mini-css-extract-plugin\nexport const root = \"PlasmicFaq-module--root--3wWsb\";\nexport const box__mxAp7 = \"PlasmicFaq-module--box__mxAp7--1LkTi\";\nexport const box___6Kkm5 = \"PlasmicFaq-module--box___6Kkm5--3Qjoi\";\nexport const box__fdElp = \"PlasmicFaq-module--box__fdElp--3SNlt\";\nexport const slotChildren = \"PlasmicFaq-module--slotChildren--QdhdI\";\nexport const slotSlot = \"PlasmicFaq-module--slotSlot--3jldM\";","// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport {\n  PlasmicFaq,\n  DefaultFaqProps,\n} from \"./plasmic/simple_light_landing_page/PlasmicFaq\"\n\n// Your component props start with props for variants and slots you defined\n// in Plasmic, but you can add more here, like event handlers that you can\n// attach to named nodes in your component.\n//\n// If you don't want to expose certain variants or slots as a prop, you can use\n// Omit to hide them:\n//\n// interface FaqProps extends Omit<DefaultFaqProps, \"hideProps1\"|\"hideProp2\"> {\n//   // etc.\n// }\n//\n// You can also stop extending from DefaultFaqProps altogether and have\n// total control over the props for your component.\ninterface FaqProps extends DefaultFaqProps {}\n\nfunction Faq(props: FaqProps) {\n  // Use PlasmicFaq to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicFaq are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, we are just piping all FaqProps here, but feel free\n  // to do whatever works for you.\n  return <PlasmicFaq {...props} />\n}\n\nexport default Faq\n","// extracted by mini-css-extract-plugin\nexport const root = \"PlasmicPricing-module--root--rcns1\";\nexport const box__oXv6G = \"PlasmicPricing-module--box__oXv6G--31dvC\";\nexport const header = \"PlasmicPricing-module--header--arUMc\";\nexport const section___3EkHb = \"PlasmicPricing-module--section___3EkHb--fmssY\";\nexport const box__rRFsw = \"PlasmicPricing-module--box__rRFsw--IOL4B\";\nexport const plan__zwEw1 = \"PlasmicPricing-module--plan__zwEw1--379dA\";\nexport const box__gupEv = \"PlasmicPricing-module--box__gupEv--3u-WX\";\nexport const plan__s0PBk = \"PlasmicPricing-module--plan__s0PBk--1Zjga\";\nexport const box___9BpXa = \"PlasmicPricing-module--box___9BpXa--1ZW5-\";\nexport const box__mHxJm = \"PlasmicPricing-module--box__mHxJm--1rDzx\";\nexport const bullet__pG00C = \"PlasmicPricing-module--bullet__pG00C--2FAu5\";\nexport const bullet__deNqC = \"PlasmicPricing-module--bullet__deNqC--2uHPH\";\nexport const bullet__rupVf = \"PlasmicPricing-module--bullet__rupVf--39FBy\";\nexport const bullet__kwgyS = \"PlasmicPricing-module--bullet__kwgyS--RR6FQ\";\nexport const plan__bZpZv = \"PlasmicPricing-module--plan__bZpZv--KzGgk\";\nexport const box__y5YHx = \"PlasmicPricing-module--box__y5YHx--22d7N\";\nexport const section__xMy3T = \"PlasmicPricing-module--section__xMy3T--3qlZD\";\nexport const faq__n5VN5 = \"PlasmicPricing-module--faq__n5VN5--2Z13Z\";\nexport const faq__za2CH = \"PlasmicPricing-module--faq__za2CH--3FIdc\";\nexport const faq__ifBhf = \"PlasmicPricing-module--faq__ifBhf--ItIM3\";\nexport const footer = \"PlasmicPricing-module--footer--k54-O\";","// @ts-nocheck\n/* eslint-disable */\n/* tslint:disable */\n/* prettier-ignore-start */\n/** @jsxRuntime classic */\n/** @jsx createPlasmicElementProxy */\n/** @jsxFrag React.Fragment */\n// This class is auto-generated by Plasmic; please do not edit!\n// Plasmic Project: dd53smoB9V3esAu5mdCJqk\n// Component: iQCFBlCyGsodp5\nimport * as React from \"react\"\n\nimport { Link, GatsbyLinkProps as LinkProps } from \"gatsby\"\n\nimport * as p from \"@plasmicapp/react-web\"\nimport {\n  hasVariant,\n  classNames,\n  wrapWithClassName,\n  createPlasmicElementProxy,\n  makeFragment,\n  MultiChoiceArg,\n  SingleBooleanChoiceArg,\n  SingleChoiceArg,\n  pick,\n  omit,\n  useTrigger,\n  StrictProps,\n  deriveRenderOpts,\n  ensureGlobalVariants,\n} from \"@plasmicapp/react-web\"\nimport Header from \"../../Header\" // plasmic-import: Fkclzo8ktuhxm/component\nimport Section from \"../../Section\" // plasmic-import: klFU1caRKOswr/component\nimport Plan from \"../../Plan\" // plasmic-import: fkmxQq5EWmYolD/component\nimport Bullet from \"../../Bullet\" // plasmic-import: rAQW-xj1ccUHnm/component\nimport LinkButton from \"../../LinkButton\" // plasmic-import: 1hrh0iVzho4Vh/component\nimport Faq from \"../../Faq\" // plasmic-import: 5eobQk2NlPo3sb/component\nimport Footer from \"../../Footer\" // plasmic-import: Ysu7-7eCIcFRC/component\n\nimport { useScreenVariants } from \"./PlasmicGlobalVariant__Screen\" // plasmic-import: MHREP1FHHzFB5i/globalVariant\n\nimport \"@plasmicapp/react-web/lib/plasmic.css\"\nimport * as defaultcss from \"../plasmic__default_style.module.css\" // plasmic-import: global/defaultcss\nimport * as projectcss from \"./plasmic_simple_light_landing_page.module.css\" // plasmic-import: dd53smoB9V3esAu5mdCJqk/projectcss\nimport * as sty from \"./PlasmicPricing.module.css\" // plasmic-import: iQCFBlCyGsodp5/css\n\nexport type PlasmicPricing__VariantMembers = {}\n\nexport type PlasmicPricing__VariantsArgs = {}\ntype VariantPropType = keyof PlasmicPricing__VariantsArgs\nexport const PlasmicPricing__VariantProps = new Array<VariantPropType>()\n\nexport type PlasmicPricing__ArgsType = {}\ntype ArgPropType = keyof PlasmicPricing__ArgsType\nexport const PlasmicPricing__ArgProps = new Array<ArgPropType>()\n\nexport type PlasmicPricing__OverridesType = {\n  root?: p.Flex<\"div\">\n  header?: p.Flex<typeof Header>\n  footer?: p.Flex<typeof Footer>\n}\n\nexport interface DefaultPricingProps {\n  className?: string\n}\n\nfunction PlasmicPricing__RenderFunc(props: {\n  variants: PlasmicPricing__VariantsArgs\n  args: PlasmicPricing__ArgsType\n  overrides: PlasmicPricing__OverridesType\n  forNode?: string\n}) {\n  const { variants, args, overrides, forNode } = props\n\n  const globalVariants = ensureGlobalVariants({\n    screen: useScreenVariants(),\n  })\n\n  return (\n    <React.Fragment>\n      <style>{`\n        body {\n          margin: 0;\n        }\n      `}</style>\n\n      <div className={defaultcss.plasmic_page_wrapper}>\n        <div\n          data-plasmic-name={\"root\"}\n          data-plasmic-override={overrides.root}\n          data-plasmic-root={true}\n          data-plasmic-for-node={forNode}\n          className={classNames(\n            defaultcss.all,\n            projectcss.root_reset,\n            sty.root\n          )}\n        >\n          <p.Stack\n            as={\"div\"}\n            hasGap={true}\n            className={classNames(defaultcss.all, sty.box__oXv6G)}\n          >\n            <Header\n              data-plasmic-name={\"header\"}\n              data-plasmic-override={overrides.header}\n              className={classNames(\"__wab_instance\", sty.header)}\n            />\n\n            <Section\n              className={classNames(\"__wab_instance\", sty.section___3EkHb)}\n              subtitle={\n                <React.Fragment>\n                  <div\n                    className={classNames(\n                      defaultcss.all,\n                      defaultcss.__wab_text,\n                      sty.box__iN3Gi\n                    )}\n                  >\n                    {\n                      \"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat.\"\n                    }\n                  </div>\n\n                  <p.Stack\n                    as={\"div\"}\n                    hasGap={true}\n                    className={classNames(defaultcss.all, sty.box__rRFsw)}\n                  >\n                    <Plan\n                      className={classNames(\"__wab_instance\", sty.plan__zwEw1)}\n                      price={\n                        <div\n                          className={classNames(\n                            defaultcss.all,\n                            defaultcss.__wab_text,\n                            sty.box__gupEv\n                          )}\n                        >\n                          {\"$10\"}\n                        </div>\n                      }\n                    >\n                      <LinkButton\n                        text={\"Get started\"}\n                        type={\"outlineBlue\" as const}\n                      />\n                    </Plan>\n\n                    <Plan\n                      className={classNames(\"__wab_instance\", sty.plan__s0PBk)}\n                      description={\n                        <p.Stack\n                          as={\"div\"}\n                          hasGap={true}\n                          className={classNames(defaultcss.all, sty.box__mHxJm)}\n                        >\n                          <Bullet\n                            className={classNames(\n                              \"__wab_instance\",\n                              sty.bullet__pG00C\n                            )}\n                          />\n\n                          <Bullet\n                            className={classNames(\n                              \"__wab_instance\",\n                              sty.bullet__deNqC\n                            )}\n                          />\n\n                          <Bullet\n                            className={classNames(\n                              \"__wab_instance\",\n                              sty.bullet__rupVf\n                            )}\n                          />\n\n                          <Bullet\n                            className={classNames(\n                              \"__wab_instance\",\n                              sty.bullet__kwgyS\n                            )}\n                          />\n                        </p.Stack>\n                      }\n                      name={\"Team\"}\n                      price={\n                        <div\n                          className={classNames(\n                            defaultcss.all,\n                            defaultcss.__wab_text,\n                            sty.box___9BpXa\n                          )}\n                        >\n                          {\"$49\"}\n                        </div>\n                      }\n                    >\n                      <LinkButton\n                        text={\"Get started\"}\n                        type={\"solidBlue\" as const}\n                      />\n                    </Plan>\n\n                    <Plan\n                      className={classNames(\"__wab_instance\", sty.plan__bZpZv)}\n                      name={\"Enterprise\"}\n                      price={\n                        <div\n                          className={classNames(\n                            defaultcss.all,\n                            defaultcss.__wab_text,\n                            sty.box__y5YHx\n                          )}\n                        >\n                          {\"$199\"}\n                        </div>\n                      }\n                    >\n                      <LinkButton\n                        text={\"Contact us\"}\n                        type={\"outlineBlue\" as const}\n                      />\n                    </Plan>\n                  </p.Stack>\n                </React.Fragment>\n              }\n              title={\"Pricing\"}\n            />\n\n            <Section\n              className={classNames(\"__wab_instance\", sty.section__xMy3T)}\n              subtitle={\n                <React.Fragment>\n                  <div\n                    className={classNames(\n                      defaultcss.all,\n                      defaultcss.__wab_text,\n                      sty.box__kGCx\n                    )}\n                  >\n                    {\n                      \"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat.\"\n                    }\n                  </div>\n\n                  <Faq\n                    className={classNames(\"__wab_instance\", sty.faq__n5VN5)}\n                    slot={\n                      \"Yes! You can. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat.\"\n                    }\n                  >\n                    {\"Are there long-term contracts?\"}\n                  </Faq>\n\n                  <Faq\n                    className={classNames(\"__wab_instance\", sty.faq__za2CH)}\n                    slot={\n                      \"Yes! You can. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat.\"\n                    }\n                  >\n                    {\"Can I add or remove licenses?\"}\n                  </Faq>\n\n                  <Faq\n                    className={classNames(\"__wab_instance\", sty.faq__ifBhf)}\n                    slot={\n                      \"Yes! You can. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur excepteur sint occaecat cupidatat.\"\n                    }\n                  >\n                    {\"Do you offer refunds?\"}\n                  </Faq>\n                </React.Fragment>\n              }\n              title={\"FAQ\"}\n            />\n\n            <Footer\n              data-plasmic-name={\"footer\"}\n              data-plasmic-override={overrides.footer}\n              className={classNames(\"__wab_instance\", sty.footer)}\n            />\n          </p.Stack>\n        </div>\n      </div>\n    </React.Fragment>\n  ) as React.ReactElement | null\n}\n\nconst PlasmicDescendants = {\n  root: [\"root\", \"header\", \"footer\"],\n  header: [\"header\"],\n  footer: [\"footer\"],\n} as const\ntype NodeNameType = keyof typeof PlasmicDescendants\ntype DescendantsType<\n  T extends NodeNameType\n> = typeof PlasmicDescendants[T][number]\ntype NodeDefaultElementType = {\n  root: \"div\"\n  header: typeof Header\n  footer: typeof Footer\n}\n\ntype ReservedPropsType = \"variants\" | \"args\" | \"overrides\"\ntype NodeOverridesType<T extends NodeNameType> = Pick<\n  PlasmicPricing__OverridesType,\n  DescendantsType<T>\n>\ntype NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects\n  variants?: PlasmicPricing__VariantsArgs\n  args?: PlasmicPricing__ArgsType\n  overrides?: NodeOverridesType<T>\n} & Omit<PlasmicPricing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props\n  // Specify args directly as props\n  Omit<PlasmicPricing__ArgsType, ReservedPropsType> &\n  // Specify overrides for each element directly as props\n  Omit<\n    NodeOverridesType<T>,\n    ReservedPropsType | VariantPropType | ArgPropType\n  > &\n  // Specify props for the root element\n  Omit<\n    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,\n    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>\n  >\n\nfunction makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {\n  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key }\n  const func = function <T extends PropsType>(\n    props: T & StrictProps<T, PropsType>\n  ) {\n    const { variants, args, overrides } = deriveRenderOpts(props, {\n      name: nodeName,\n      descendantNames: [...PlasmicDescendants[nodeName]],\n      internalArgPropNames: PlasmicPricing__ArgProps,\n      internalVariantPropNames: PlasmicPricing__VariantProps,\n    })\n\n    return PlasmicPricing__RenderFunc({\n      variants,\n      args,\n      overrides,\n      forNode: nodeName,\n    })\n  }\n  if (nodeName === \"root\") {\n    func.displayName = \"PlasmicPricing\"\n  } else {\n    func.displayName = `PlasmicPricing.${nodeName}`\n  }\n  return func\n}\n\nexport const PlasmicPricing = Object.assign(\n  // Top-level PlasmicPricing renders the root element\n  makeNodeComponent(\"root\"),\n  {\n    // Helper components rendering sub-elements\n    header: makeNodeComponent(\"header\"),\n    footer: makeNodeComponent(\"footer\"),\n\n    // Metadata about props expected for PlasmicPricing\n    internalVariantProps: PlasmicPricing__VariantProps,\n    internalArgProps: PlasmicPricing__ArgProps,\n  }\n)\n\nexport default PlasmicPricing\n/* prettier-ignore-end */\n","// This is a skeleton starter React page generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport * as React from \"react\"\nimport { ScreenVariantProvider } from \"../components/plasmic/simple_light_landing_page/PlasmicGlobalVariant__Screen\"\nimport { PlasmicPricing } from \"../components/plasmic/simple_light_landing_page/PlasmicPricing\"\n\nfunction Pricing() {\n  // Use PlasmicPricing to render this component as it was\n  // designed in Plasmic, by activating the appropriate variants,\n  // attaching the appropriate event handlers, etc.  You\n  // can also install whatever React hooks you need here to manage state or\n  // fetch data.\n  //\n  // Props you can pass into PlasmicPricing are:\n  // 1. Variants you want to activate,\n  // 2. Contents for slots you want to fill,\n  // 3. Overrides for any named node in the component to attach behavior and data,\n  // 4. Props to set on the root node.\n  //\n  // By default, PlasmicPricing is wrapped by your project's global\n  // variant context providers. These wrappers may be moved to\n  // Gatsby \"wrapRootElement\" function\n  // (https://www.gatsbyjs.com/docs/reference/config-files/gatsby-ssr#wrapRootElement).\n  return <PlasmicPricing />\n}\n\nexport default Pricing\n"],"sourceRoot":""}